function t(t,e=!1){return window.__TAURI_INTERNALS__.transformCallback(t,e)}async function e(t,e={},i){return window.__TAURI_INTERNALS__.invoke(t,e,i)}var i;async function r(i,r,s){const a={kind:"Any"};return e("plugin:event|listen",{event:i,target:a,handler:t(r)}).then((t=>async()=>async function(t,i){await e("plugin:event|unlisten",{event:t,eventId:i})}(i,t)))}"function"==typeof SuppressedError&&SuppressedError,function(t){t.WINDOW_RESIZED="tauri://resize",t.WINDOW_MOVED="tauri://move",t.WINDOW_CLOSE_REQUESTED="tauri://close-requested",t.WINDOW_DESTROYED="tauri://destroyed",t.WINDOW_FOCUS="tauri://focus",t.WINDOW_BLUR="tauri://blur",t.WINDOW_SCALE_FACTOR_CHANGED="tauri://scale-change",t.WINDOW_THEME_CHANGED="tauri://theme-changed",t.WINDOW_CREATED="tauri://window-created",t.WEBVIEW_CREATED="tauri://webview-created",t.DRAG="tauri://drag",t.DROP="tauri://drop",t.DROP_OVER="tauri://drop-over",t.DROP_CANCELLED="tauri://drag-cancelled"}(i||(i={}));class s{constructor(t){this.isOpen=!1,this.encoding="utf-8",this.options={path:t.path,baudRate:t.baudRate,dataBits:t.dataBits||"Eight",flowControl:t.flowControl||"None",parity:t.parity||"None",stopBits:t.stopBits||"Two",dtr:t.dtr||!1,timeout:t.timeout||200}}static async available_ports(){try{return await e("plugin:serialport|available_ports")}catch(t){return Promise.reject(t)}}static async forceClose(t){return await e("plugin:serialport|force_close",{path:t})}static async closeAll(){return await e("plugin:serialport|close_all")}async cancelListen(){try{return void(this.unListen&&(this.unListen(),this.unListen=void 0))}catch(t){return Promise.reject("Impossible to cancel listening: "+t)}}async cancelRead(){try{return await e("plugin:serialport|cancel_read",{path:this.options.path})}catch(t){return Promise.reject(t)}}async change(t){try{let e=!1;return this.isOpen&&(e=!0,await this.close()),t.path&&(this.options.path=t.path),t.baudRate&&(this.options.baudRate=t.baudRate),e&&await this.open(),Promise.resolve()}catch(t){return Promise.reject(t)}}async close(){try{if(!this.isOpen)return;await this.cancelRead();const t=await e("plugin:serialport|close",{path:this.options.path});return await this.cancelListen(),this.isOpen=!1,t}catch(t){return Promise.reject(t)}}async listen(t,e=!0){try{await this.cancelListen();let i="plugin-serialport-read-"+this.options.path;return void(this.unListen=await r(i,(({payload:i})=>{try{if(e){const e=new TextDecoder(this.encoding).decode(new Uint8Array(i));t(e)}else t(new Uint8Array(i))}catch(t){console.error(t)}})))}catch(t){return Promise.reject("Impossible to start listening: "+t)}}async open(){try{if(!this.options.path)return Promise.reject("Incorrect path");if(!this.options.baudRate)return Promise.reject("Incorrect baudrate");if(this.isOpen)return;const t=await e("plugin:serialport|open",{path:this.options.path,baudRate:this.options.baudRate,dataBits:this.options.dataBits,flowControl:this.options.flowControl,parity:this.options.parity,stopBits:this.options.stopBits,dtr:this.options.dtr,timeout:this.options.timeout});return this.isOpen=!0,Promise.resolve(t)}catch(t){return Promise.reject(t)}}async read(t){try{return await e("plugin:serialport|read",{path:this.options.path,timeout:t?.timeout||this.options.timeout})}catch(t){return Promise.reject(t)}}async setBaudRate(t){try{let e=!1;return this.isOpen&&(e=!0,await this.close()),this.options.baudRate=t,e&&await this.open(),Promise.resolve()}catch(t){return Promise.reject(t)}}async setPath(t){try{let e=!1;return this.isOpen&&(e=!0,await this.close()),this.options.path=t,e&&await this.open(),Promise.resolve()}catch(t){return Promise.reject(t)}}async write(t){try{return this.isOpen?await e("plugin:serialport|write",{value:t,path:this.options.path}):Promise.reject(`Impossible to write to ${this.options.path}`)}catch(t){return Promise.reject(t)}}async writeBinary(t){try{return this.isOpen?t instanceof Uint8Array||t instanceof Array?await e("plugin:serialport|write_binary",{value:Array.from(t),path:this.options.path}):Promise.reject("value must be one of these types: string, Uint8Array, number[]"):Promise.reject(`Impossible to write to ${this.options.path}`)}catch(t){return Promise.reject(t)}}}export{s as SerialPort};
